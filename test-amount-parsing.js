// ===== SCRIPT DE PRUEBA PARA PARSING DE MONTOS =====

console.log('üß™ === PRUEBA DE PARSING DE MONTOS ===');

// Funci√≥n para probar el parsing de tu caso espec√≠fico
function testSpecificAmount() {
    console.log('üîç Probando tu caso espec√≠fico: "100.000,00"');
    
    const testAmount = "100.000,00";
    const testBank = "BAC"; // Asumiendo que es BAC, ajusta si es otro banco
    
    console.log('üìã Datos de prueba:');
    console.log(`   - Monto original: "${testAmount}"`);
    console.log(`   - Banco: "${testBank}"`);
    
    // Probar con parseAmount (funci√≥n universal)
    console.log('\nüîß Probando con parseAmount (funci√≥n universal):');
    const result1 = parseAmount(testAmount);
    console.log(`   - Resultado: ${result1}`);
    console.log(`   - Formateado: ‚Ç°${result1.toLocaleString('es-CR')}`);
    
    // Probar con parsePaymentAmountByBank
    console.log('\nüîß Probando con parsePaymentAmountByBank:');
    const result2 = parsePaymentAmountByBank(testAmount, testBank);
    console.log(`   - Resultado: ${result2}`);
    console.log(`   - Formateado: ‚Ç°${result2.toLocaleString('es-CR')}`);
    
    // Probar con parsePaymentAmount
    console.log('\nüîß Probando con parsePaymentAmount:');
    const result3 = parsePaymentAmount(testAmount, testBank);
    console.log(`   - Resultado: ${result3}`);
    console.log(`   - Formateado: ‚Ç°${result3.toLocaleString('es-CR')}`);
    
    // Verificar si hay diferencias
    if (result1 === result2 && result2 === result3) {
        console.log('\n‚úÖ Todas las funciones devuelven el mismo resultado');
    } else {
        console.log('\n‚ùå Las funciones devuelven resultados diferentes:');
        console.log(`   - parseAmount: ${result1}`);
        console.log(`   - parsePaymentAmountByBank: ${result2}`);
        console.log(`   - parsePaymentAmount: ${result3}`);
    }
    
    return { result1, result2, result3 };
}

// Funci√≥n para probar diferentes formatos
function testDifferentFormats() {
    console.log('\nüîç Probando diferentes formatos de n√∫meros:');
    
    const testCases = [
        { amount: "100.000,00", bank: "BAC", expected: 100000 },
        { amount: "100,000.00", bank: "BN", expected: 100000 },
        { amount: "100000", bank: "BAC", expected: 100000 },
        { amount: "100.000", bank: "BAC", expected: 100000 },
        { amount: "100,000", bank: "BN", expected: 100000 },
        { amount: "100000.00", bank: "BN", expected: 100000 },
        { amount: "20.000,00", bank: "HuberBN", expected: 20000 },
        { amount: "20000", bank: "HuberBN", expected: 20000 }
    ];
    
    testCases.forEach((testCase, index) => {
        console.log(`\nüìã Caso ${index + 1}: "${testCase.amount}" (${testCase.bank})`);
        
        const result1 = parseAmount(testCase.amount);
        const result2 = parsePaymentAmountByBank(testCase.amount, testCase.bank);
        const result3 = parsePaymentAmount(testCase.amount, testCase.bank);
        
        console.log(`   - Esperado: ${testCase.expected}`);
        console.log(`   - parseAmount: ${result1} ${result1 === testCase.expected ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - parsePaymentAmountByBank: ${result2} ${result2 === testCase.expected ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - parsePaymentAmount: ${result3} ${result3 === testCase.expected ? '‚úÖ' : '‚ùå'}`);
        
        if (result1 !== testCase.expected || result2 !== testCase.expected || result3 !== testCase.expected) {
            console.log(`   ‚ö†Ô∏è PROBLEMA: Al menos una funci√≥n no devuelve el valor esperado`);
        }
    });
}

// Funci√≥n para simular el procesamiento de tu transacci√≥n
function simulateTransactionProcessing() {
    console.log('\nüîç Simulando el procesamiento de tu transacci√≥n:');
    
    // Simular los datos de tu transacci√≥n
    const transactionData = {
        reference: "23339077",
        date: "03/08/2025",
        description: "03-08-25 PAGO CARRO/JOSE ALEXANDER MOYA GONZALEZ",
        amount: "100.000,00",
        bank: "BAC" // Ajusta seg√∫n tu banco
    };
    
    console.log('üìã Datos de la transacci√≥n:');
    console.log(`   - Referencia: ${transactionData.reference}`);
    console.log(`   - Fecha: ${transactionData.date}`);
    console.log(`   - Descripci√≥n: ${transactionData.description}`);
    console.log(`   - Monto: "${transactionData.amount}"`);
    console.log(`   - Banco: ${transactionData.bank}`);
    
    // Simular el procesamiento que har√≠a el sistema
    console.log('\nüîÑ Procesamiento del sistema:');
    
    // Paso 1: Parsear el monto
    const parsedAmount = parsePaymentAmountByBank(transactionData.amount, transactionData.bank);
    console.log(`   1. Monto parseado: ${parsedAmount}`);
    console.log(`      - Formateado: ‚Ç°${parsedAmount.toLocaleString('es-CR')}`);
    
    // Paso 2: Verificar si es correcto
    const expectedAmount = 100000;
    const isCorrect = parsedAmount === expectedAmount;
    console.log(`   2. Verificaci√≥n: ${isCorrect ? '‚úÖ CORRECTO' : '‚ùå INCORRECTO'}`);
    console.log(`      - Esperado: ‚Ç°${expectedAmount.toLocaleString('es-CR')}`);
    console.log(`      - Obtenido: ‚Ç°${parsedAmount.toLocaleString('es-CR')}`);
    
    if (!isCorrect) {
        console.log(`   ‚ö†Ô∏è PROBLEMA: El monto se est√° interpretando como ${parsedAmount} en lugar de ${expectedAmount}`);
        console.log(`   üîç Posibles causas:`);
        console.log(`      - Banco incorrecto en la configuraci√≥n`);
        console.log(`      - Formato de n√∫mero diferente al esperado`);
        console.log(`      - Error en la funci√≥n de parsing`);
    }
    
    return { parsedAmount, expectedAmount, isCorrect };
}

// Funci√≥n para verificar qu√© banco est√° usando tu transacci√≥n
function identifyBankForTransaction() {
    console.log('\nüîç Identificando el banco para tu transacci√≥n:');
    
    const transactionData = {
        reference: "23339077",
        amount: "100.000,00"
    };
    
    // Probar con diferentes bancos
    const banks = ["BAC", "BN", "HuberBN"];
    
    banks.forEach(bank => {
        const result = parsePaymentAmountByBank(transactionData.amount, bank);
        console.log(`   - ${bank}: ${result} (‚Ç°${result.toLocaleString('es-CR')})`);
    });
    
    console.log('\nüí° Recomendaci√≥n:');
    console.log('   Si tu transacci√≥n viene de BAC, deber√≠a mostrar 100000');
    console.log('   Si tu transacci√≥n viene de BN, deber√≠a mostrar 100');
    console.log('   Si tu transacci√≥n viene de HuberBN, deber√≠a mostrar 100000');
}

// Ejecutar todas las pruebas
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Iniciando pruebas de parsing de montos...');
    
    // Esperar un momento para que todos los scripts se carguen
    setTimeout(() => {
        const specificTest = testSpecificAmount();
        testDifferentFormats();
        const simulation = simulateTransactionProcessing();
        identifyBankForTransaction();
        
        console.log('\nüìä Resumen de resultados:');
        console.log(`   - Tu caso espec√≠fico: ${specificTest.result2}`);
        console.log(`   - Simulaci√≥n: ${simulation.isCorrect ? '‚úÖ Correcto' : '‚ùå Incorrecto'}`);
        
        if (simulation.isCorrect) {
            console.log('\nüéâ El parsing est√° funcionando correctamente.');
            console.log('üí° Si a√∫n ves 100 en lugar de 100000, el problema puede estar en:');
            console.log('   1. El banco configurado incorrectamente');
            console.log('   2. La transacci√≥n se est√° procesando con otro banco');
            console.log('   3. Hay un error en otra parte del c√≥digo');
        } else {
            console.log('\n‚ùå Hay un problema con el parsing de montos.');
            console.log('üîß Revisa la configuraci√≥n del banco para tu transacci√≥n.');
        }
    }, 1000);
});

// Exponer funciones para pruebas manuales
window.testSpecificAmount = testSpecificAmount;
window.testDifferentFormats = testDifferentFormats;
window.simulateTransactionProcessing = simulateTransactionProcessing;
window.identifyBankForTransaction = identifyBankForTransaction;

console.log('‚úÖ test-amount-parsing.js cargado'); 