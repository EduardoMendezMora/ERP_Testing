// ===== SCRIPT PARA CORREGIR MONTOS INCORRECTOS EN PAGOS =====

console.log('üîß === SCRIPT DE CORRECCI√ìN DE MONTOS DE PAGOS ===');

// Funci√≥n para identificar pagos con montos incorrectos
async function identifyIncorrectPayments() {
    console.log('üîç Identificando pagos con montos incorrectos...');
    
    const sheets = ['BAC', 'BN', 'HuberBN'];
    const problematicPayments = [];
    
    for (const sheet of sheets) {
        try {
            console.log(`üìã Revisando ${sheet}...`);
            const url = `${API_CONFIG.PAYMENTS}?sheet=${sheet}`;
            const response = await fetch(url);
            
            if (response.ok) {
                const paymentsData = await response.json();
                const payments = Array.isArray(paymentsData) ? paymentsData : [];
                
                payments.forEach(payment => {
                    if (payment.FacturasAsignadas && payment.FacturasAsignadas.trim() !== '') {
                        const assignments = parseAssignedInvoices(payment.FacturasAsignadas);
                        const totalAssigned = assignments.reduce((sum, a) => sum + a.amount, 0);
                        const totalPayment = parsePaymentAmount(payment.Cr√©ditos, payment.BankSource);
                        
                        // Verificar si hay discrepancia
                        if (Math.abs(totalAssigned - totalPayment) > 1) {
                            problematicPayments.push({
                                payment: payment,
                                sheet: sheet,
                                totalAssigned: totalAssigned,
                                totalPayment: totalPayment,
                                discrepancy: totalAssigned - totalPayment,
                                assignments: assignments
                            });
                        }
                    }
                });
            }
        } catch (error) {
            console.warn(`Error revisando ${sheet}:`, error);
        }
    }
    
    console.log(`\nüìä Resultados:`);
    console.log(`   - Pagos problem√°ticos encontrados: ${problematicPayments.length}`);
    
    problematicPayments.forEach((item, index) => {
        console.log(`\n${index + 1}. Pago problem√°tico:`);
        console.log(`   - Referencia: ${item.payment.Referencia}`);
        console.log(`   - Banco: ${item.sheet}`);
        console.log(`   - Monto del pago: ‚Ç°${item.totalPayment.toLocaleString('es-CR')}`);
        console.log(`   - Total asignado: ‚Ç°${item.totalAssigned.toLocaleString('es-CR')}`);
        console.log(`   - Discrepancia: ‚Ç°${item.discrepancy.toLocaleString('es-CR')}`);
        console.log(`   - FacturasAsignadas: "${item.payment.FacturasAsignadas}"`);
    });
    
    return problematicPayments;
}

// Funci√≥n para corregir un pago espec√≠fico
async function fixPaymentAmounts(paymentReference, bankSource) {
    console.log(`üîß Corrigiendo pago ${paymentReference} en ${bankSource}...`);
    
    try {
        // Obtener el pago
        const url = `${API_CONFIG.PAYMENTS}/Referencia/${encodeURIComponent(paymentReference)}?sheet=${bankSource}`;
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error(`No se pudo obtener el pago: ${response.status}`);
        }
        
        const payment = await response.json();
        console.log('üìã Pago original:', payment);
        
        if (!payment.FacturasAsignadas || payment.FacturasAsignadas.trim() === '') {
            console.log('‚úÖ Pago no tiene asignaciones - no necesita correcci√≥n');
            return;
        }
        
        const assignments = parseAssignedInvoices(payment.FacturasAsignadas);
        const totalAssigned = assignments.reduce((sum, a) => sum + a.amount, 0);
        const totalPayment = parsePaymentAmount(payment.Cr√©ditos, payment.BankSource);
        
        console.log(`üí∞ An√°lisis:`);
        console.log(`   - Monto del pago: ‚Ç°${totalPayment.toLocaleString('es-CR')}`);
        console.log(`   - Total asignado: ‚Ç°${totalAssigned.toLocaleString('es-CR')}`);
        console.log(`   - Discrepancia: ‚Ç°${(totalAssigned - totalPayment).toLocaleString('es-CR')}`);
        
        // Si no hay discrepancia, no necesita correcci√≥n
        if (Math.abs(totalAssigned - totalPayment) <= 1) {
            console.log('‚úÖ Pago ya est√° correcto');
            return;
        }
        
        // Calcular la proporci√≥n correcta
        const ratio = totalPayment / totalAssigned;
        console.log(`üìä Proporci√≥n de correcci√≥n: ${ratio.toFixed(4)}`);
        
        // Corregir las asignaciones
        const correctedAssignments = assignments.map(assignment => ({
            invoiceNumber: assignment.invoiceNumber,
            amount: Math.round(assignment.amount * ratio)
        }));
        
        console.log('üîß Asignaciones corregidas:');
        correctedAssignments.forEach((assignment, index) => {
            console.log(`   ${index + 1}. ${assignment.invoiceNumber}: ‚Ç°${assignment.amount.toLocaleString('es-CR')}`);
        });
        
        const totalCorrected = correctedAssignments.reduce((sum, a) => sum + a.amount, 0);
        console.log(`üí∞ Total corregido: ‚Ç°${totalCorrected.toLocaleString('es-CR')}`);
        
        // Formatear para la base de datos
        const formattedAssignments = formatAssignedInvoices(correctedAssignments);
        console.log(`üìù Formato para BD: "${formattedAssignments}"`);
        
        // Actualizar en la base de datos
        const updateData = {
            FacturasAsignadas: formattedAssignments,
            Disponible: '0' // Si est√° completamente asignado
        };
        
        const updateUrl = `${API_CONFIG.PAYMENTS}/Referencia/${encodeURIComponent(paymentReference)}?sheet=${bankSource}`;
        const updateResponse = await fetch(updateUrl, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData)
        });
        
        if (updateResponse.ok) {
            const result = await updateResponse.json();
            console.log('‚úÖ Pago corregido exitosamente:', result);
        } else {
            throw new Error(`Error al actualizar: ${updateResponse.status}`);
        }
        
    } catch (error) {
        console.error('‚ùå Error corrigiendo pago:', error);
        throw error;
    }
}

// Funci√≥n para corregir todos los pagos problem√°ticos
async function fixAllProblematicPayments() {
    console.log('üîß Iniciando correcci√≥n masiva de pagos...');
    
    try {
        const problematicPayments = await identifyIncorrectPayments();
        
        if (problematicPayments.length === 0) {
            console.log('‚úÖ No se encontraron pagos que necesiten correcci√≥n');
            return;
        }
        
        console.log(`\nüîß Corrigiendo ${problematicPayments.length} pagos...`);
        
        for (let i = 0; i < problematicPayments.length; i++) {
            const item = problematicPayments[i];
            console.log(`\n${i + 1}/${problematicPayments.length} - Corrigiendo ${item.payment.Referencia}...`);
            
            try {
                await fixPaymentAmounts(item.payment.Referencia, item.sheet);
                console.log(`‚úÖ ${item.payment.Referencia} corregido`);
            } catch (error) {
                console.error(`‚ùå Error corrigiendo ${item.payment.Referencia}:`, error);
            }
            
            // Pausa entre correcciones para no sobrecargar la API
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log('\nüéâ Correcci√≥n masiva completada');
        
    } catch (error) {
        console.error('‚ùå Error en correcci√≥n masiva:', error);
    }
}

// Funci√≥n para probar la correcci√≥n con un pago espec√≠fico
async function testFixSpecificPayment(reference = '11111111', bank = 'BAC') {
    console.log(`üß™ Probando correcci√≥n con pago ${reference} en ${bank}...`);
    
    try {
        await fixPaymentAmounts(reference, bank);
        console.log('‚úÖ Prueba de correcci√≥n completada');
    } catch (error) {
        console.error('‚ùå Error en prueba de correcci√≥n:', error);
    }
}

// Ejecutar an√°lisis al cargar
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de correcci√≥n de montos cargado');
    console.log('üí° Funciones disponibles:');
    console.log('   - identifyIncorrectPayments()');
    console.log('   - fixPaymentAmounts(reference, bank)');
    console.log('   - fixAllProblematicPayments()');
    console.log('   - testFixSpecificPayment(reference, bank)');
});

// Exponer funciones para uso manual
window.identifyIncorrectPayments = identifyIncorrectPayments;
window.fixPaymentAmounts = fixPaymentAmounts;
window.fixAllProblematicPayments = fixAllProblematicPayments;
window.testFixSpecificPayment = testFixSpecificPayment;

console.log('‚úÖ fix-payment-amounts.js cargado'); 