// ===== SCRIPT DE PRUEBA PARA PROBLEMA DE VISUALIZACI√ìN DE PAGOS =====

console.log('üß™ === PRUEBA DE PROBLEMA DE VISUALIZACI√ìN DE PAGOS ===');

// Funci√≥n para probar el problema espec√≠fico del pago de ‚Ç°150,000
function testPaymentDisplayIssue() {
    console.log('üîç Analizando el problema del pago de ‚Ç°150,000:');
    
    // Simular el pago problem√°tico
    const problematicPayment = {
        Referencia: '11111111',
        BankSource: 'BAC',
        Cr√©ditos: '150.000,00',
        Fecha: '05/08/2025',
        FacturasAsignadas: 'FAC-25305:100000;FAC-25306:125000',
        Disponible: '0'
    };
    
    console.log('üìã Datos del pago problem√°tico:');
    console.log(`   - Referencia: ${problematicPayment.Referencia}`);
    console.log(`   - Banco: ${problematicPayment.BankSource}`);
    console.log(`   - Monto total: ${problematicPayment.Cr√©ditos}`);
    console.log(`   - FacturasAsignadas: "${problematicPayment.FacturasAsignadas}"`);
    console.log(`   - Disponible: ${problematicPayment.Disponible}`);
    
    // Parsear las asignaciones
    const assignments = parseAssignedInvoices(problematicPayment.FacturasAsignadas);
    console.log('\nüîß Asignaciones parseadas:');
    assignments.forEach((assignment, index) => {
        console.log(`   ${index + 1}. ${assignment.invoiceNumber}: ‚Ç°${assignment.amount.toLocaleString('es-CR')}`);
    });
    
    // Calcular total asignado
    const totalAssigned = assignments.reduce((sum, a) => sum + a.amount, 0);
    console.log(`\nüí∞ Total asignado: ‚Ç°${totalAssigned.toLocaleString('es-CR')}`);
    
    // Parsear el monto total del pago
    const totalPayment = parsePaymentAmount(problematicPayment.Cr√©ditos, problematicPayment.BankSource);
    console.log(`üí∞ Monto total del pago: ‚Ç°${totalPayment.toLocaleString('es-CR')}`);
    
    // Verificar la discrepancia
    const discrepancy = totalAssigned - totalPayment;
    console.log(`\n‚ö†Ô∏è DISCREPANCIA: ‚Ç°${discrepancy.toLocaleString('es-CR')}`);
    
    if (discrepancy > 0) {
        console.log('‚ùå PROBLEMA IDENTIFICADO:');
        console.log('   - El sistema est√° mostrando montos de facturas completas');
        console.log('   - En lugar de los montos realmente aplicados desde el pago');
        console.log('   - Esto causa que se muestre m√°s dinero del que realmente se pag√≥');
    }
    
    return {
        payment: problematicPayment,
        assignments: assignments,
        totalAssigned: totalAssigned,
        totalPayment: totalPayment,
        discrepancy: discrepancy
    };
}

// Funci√≥n para simular c√≥mo deber√≠a ser la visualizaci√≥n correcta
function simulateCorrectDisplay() {
    console.log('\nüîç Simulando visualizaci√≥n correcta:');
    
    const payment = {
        Referencia: '11111111',
        BankSource: 'BAC',
        Cr√©ditos: '150.000,00',
        Fecha: '05/08/2025'
    };
    
    // Simular facturas con montos totales
    const invoices = [
        { NumeroFactura: 'FAC-25305', MontoBase: '100.000,00', ConceptoManual: 'Semana del 7 al 13 de Agosto del 2025' },
        { NumeroFactura: 'FAC-25306', MontoBase: '125.000,00', ConceptoManual: 'Semana del 14 al 20 de Agosto del 2025' }
    ];
    
    const totalPayment = parsePaymentAmount(payment.Cr√©ditos, payment.BankSource);
    console.log(`üí∞ Pago total: ‚Ç°${totalPayment.toLocaleString('es-CR')}`);
    
    // Calcular distribuci√≥n correcta
    let remainingAmount = totalPayment;
    const correctAssignments = [];
    
    invoices.forEach((invoice, index) => {
        const invoiceTotal = parseAmount(invoice.MontoBase);
        const amountToApply = Math.min(remainingAmount, invoiceTotal);
        
        correctAssignments.push({
            invoiceNumber: invoice.NumeroFactura,
            amount: amountToApply,
            invoiceTotal: invoiceTotal,
            concept: invoice.ConceptoManual
        });
        
        remainingAmount -= amountToApply;
    });
    
    console.log('\n‚úÖ Distribuci√≥n correcta:');
    correctAssignments.forEach((assignment, index) => {
        console.log(`   ${index + 1}. ${assignment.invoiceNumber}:`);
        console.log(`      - Monto aplicado: ‚Ç°${assignment.amount.toLocaleString('es-CR')}`);
        console.log(`      - Monto total factura: ‚Ç°${assignment.invoiceTotal.toLocaleString('es-CR')}`);
        console.log(`      - Concepto: ${assignment.concept}`);
    });
    
    const totalApplied = correctAssignments.reduce((sum, a) => sum + a.amount, 0);
    console.log(`\nüí∞ Total aplicado: ‚Ç°${totalApplied.toLocaleString('es-CR')}`);
    console.log(`üí∞ Restante: ‚Ç°${remainingAmount.toLocaleString('es-CR')}`);
    
    return correctAssignments;
}

// Funci√≥n para identificar d√≥nde est√° el error en el c√≥digo
function identifyCodeIssue() {
    console.log('\nüîç Identificando d√≥nde est√° el error en el c√≥digo:');
    
    console.log('1. üìù En payment-management.js l√≠nea 209:');
    console.log('   - Se crea assignmentsForWhatsApp con amountToApply (CORRECTO)');
    console.log('   - amountToApply = monto realmente aplicado desde el pago');
    
    console.log('\n2. üìù En receipt-whatsapp.js l√≠nea 865:');
    console.log('   - Se usa assignment.amount para mostrar en el recibo');
    console.log('   - assignment.amount viene de parseAssignedInvoices()');
    
    console.log('\n3. üìù En payment-management.js l√≠nea 1614:');
    console.log('   - parseAssignedInvoices(payment.FacturasAsignadas)');
    console.log('   - FacturasAsignadas contiene: "FAC-25305:100000;FAC-25306:125000"');
    
    console.log('\n‚ùå PROBLEMA IDENTIFICADO:');
    console.log('   - Los montos en FacturasAsignadas son los montos realmente aplicados');
    console.log('   - Pero el sistema los est√° interpretando como montos totales de facturas');
    console.log('   - Esto causa la discrepancia en la visualizaci√≥n');
    
    console.log('\n‚úÖ SOLUCI√ìN:');
    console.log('   - Los montos en FacturasAsignadas est√°n CORRECTOS');
    console.log('   - El problema est√° en la interpretaci√≥n al mostrar');
    console.log('   - Se debe mostrar el monto aplicado, no el monto total de la factura');
}

// Funci√≥n para probar la funci√≥n parseAssignedInvoices
function testParseAssignedInvoices() {
    console.log('\nüîç Probando parseAssignedInvoices:');
    
    const testString = 'FAC-25305:100000;FAC-25306:125000';
    console.log(`üìã String de prueba: "${testString}"`);
    
    const result = parseAssignedInvoices(testString);
    console.log('üîß Resultado parseado:');
    result.forEach((assignment, index) => {
        console.log(`   ${index + 1}. ${assignment.invoiceNumber}: ‚Ç°${assignment.amount.toLocaleString('es-CR')}`);
    });
    
    console.log('\nüí° Interpretaci√≥n:');
    console.log('   - FAC-25305: ‚Ç°100,000 (monto realmente aplicado desde el pago)');
    console.log('   - FAC-25306: ‚Ç°125,000 (monto realmente aplicado desde el pago)');
    console.log('   - Total: ‚Ç°225,000 (pero el pago era solo ‚Ç°150,000)');
    
    console.log('\n‚ùå CONCLUSI√ìN:');
    console.log('   - Los montos en FacturasAsignadas est√°n INCORRECTOS');
    console.log('   - Se est√°n guardando montos totales de facturas en lugar de montos aplicados');
    console.log('   - El problema est√° en el proceso de asignaci√≥n, no en la visualizaci√≥n');
}

// Ejecutar todas las pruebas
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Iniciando an√°lisis del problema de visualizaci√≥n...');
    
    setTimeout(() => {
        const testResult = testPaymentDisplayIssue();
        const correctAssignments = simulateCorrectDisplay();
        identifyCodeIssue();
        testParseAssignedInvoices();
        
        console.log('\nüìä Resumen del an√°lisis:');
        console.log('‚ùå PROBLEMA PRINCIPAL:');
        console.log('   - Los montos en FacturasAsignadas est√°n incorrectos');
        console.log('   - Se guardan montos totales de facturas en lugar de montos aplicados');
        console.log('   - Esto causa que se muestre m√°s dinero del que realmente se pag√≥');
        
        console.log('\n‚úÖ SOLUCI√ìN REQUERIDA:');
        console.log('   - Corregir el proceso de asignaci√≥n para guardar montos aplicados');
        console.log('   - No montos totales de facturas');
        console.log('   - Esto asegurar√° que la visualizaci√≥n sea correcta');
        
    }, 1000);
});

// Exponer funciones para pruebas manuales
window.testPaymentDisplayIssue = testPaymentDisplayIssue;
window.simulateCorrectDisplay = simulateCorrectDisplay;
window.identifyCodeIssue = identifyCodeIssue;
window.testParseAssignedInvoices = testParseAssignedInvoices;

console.log('‚úÖ test-payment-display-issue.js cargado'); 